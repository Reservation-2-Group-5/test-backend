// Reuse the certificate generated by dotnet dev-certs from the main app

const fs = require('fs');
const { spawn } = require('child_process');
const path = require('path');

const baseFolder = process.env.APPDATA !== undefined && process.env.APPDATA !== ''
  ? `${process.env.APPDATA}/ASP.NET/https`
  : `${process.env.HOME}/.aspnet/https`;

async function getHttpsConfig() {
  const certificateArg = process.argv.map((arg) => arg.match(/--name=(?<value>.+)/i)).filter(Boolean)[0];
  const certificateName = certificateArg ? certificateArg.groups.value : 'vueapp';

  console.log(`Checking for certificates in ${baseFolder}`);
  if (!certificateName) {
    console.error('Invalid certificate name. Run this script in the context of an npm/yarn script or pass --name=<<app>> explicitly.');
  }

  const certFilePath = path.join(baseFolder, `${certificateName}.pem`);
  const keyFilePath = path.join(baseFolder, `${certificateName}.key`);

  if (!fs.existsSync(certFilePath) || !fs.existsSync(keyFilePath)) {
    return new Promise((resolve, reject) => {
      // create certificate if it doesn't exist
      spawn('dotnet', [
        'dev-certs',
        'https',
        '--export-path',
        certFilePath,
        '--format',
        'Pem',
        '--no-password',
      ], { stdio: 'inherit' }).on('exit', (code) => {
        if (code !== 0) {
          reject(new Error(`dotnet command exited with code ${code}`));
        }
        // check if certificate was created
        if (fs.existsSync(certFilePath) && fs.existsSync(keyFilePath)) {
          console.log(`Using certificate: ${certFilePath}`);
          console.log(`Using key: ${keyFilePath}`);
          resolve({
            key: fs.readFileSync(keyFilePath),
            cert: fs.readFileSync(certFilePath),
          });
        } else {
          console.log('No certificate found. Skipping https configuration.');
          resolve({
            key: null,
            cert: null,
          });
        }
      });
    });
  }
  console.log(`Using certificate: ${certFilePath}`);
  console.log(`Using key: ${keyFilePath}`);
  return {
    key: fs.readFileSync(keyFilePath),
    cert: fs.readFileSync(certFilePath),
  };
}

module.exports = getHttpsConfig;
